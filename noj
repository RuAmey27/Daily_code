from flask import Flask, render_template, request

app = Flask(__name__)

def is_valid_ipv4(ip_address):
    octets = ip_address.split('.')
    if len(octets) != 4:
        return False
    for octet in octets:
        try:
            value = int(octet)
            if not (0 <= value <= 255):
                return False
        except ValueError:
            return False

    return True

def is_private_ip(ip_address):
    octets = ip_address.split('.')
    first_octet = int(octets[0])

    if first_octet == 10 or \
            (first_octet == 172 and 16 <= int(octets[1]) <= 31) or \
            (first_octet == 192 and int(octets[1]) == 168):
        return True

    return False

def is_reserved_ip(ip_address):
    octets = ip_address.split('.')
    first_octet = int(octets[0])

    if (first_octet == 0) or \
            (first_octet == 192 and int(octets[1]) == 0 and int(octets[2]) == 0) or \
            (first_octet == 192 and int(octets[1]) == 0 and int(octets[2]) == 2) or \
            (first_octet == 192 and int(octets[1]) == 88 and int(octets[2]) == 99) or \
            (first_octet == 198 and int(octets[1]) == 51 and int(octets[2]) == 100) or \
            (first_octet == 203 and int(octets[1]) == 0 and int(octets[2]) == 113) or \
            (224 <= first_octet <= 239):
        return True

    return False

def get_ip_class(ip_address):
    if not is_valid_ipv4(ip_address):
        return 'Invalid', 'N/A', 'N/A', 'N/A', 'N/A'

    octets = ip_address.split('.')
    first_octet = int(octets[0])
    second_octet = int(octets[1])
    third_octet = int(octets[2])
    fourth_octet = int(octets[3])

    if first_octet >= 1 and first_octet <= 127:
        ip_class = 'Class A'
        block_number = first_octet
        first_address = f"{first_octet}.0.0.0"
        last_address = f"{first_octet}.255.255.255"
    elif first_octet >= 128 and first_octet <= 191:
        ip_class = 'Class B'
        block_number = (second_octet << 16) + (third_octet << 8) + int(octets[3])
        first_address = f"{octets[0]}.{octets[1]}.0.0"
        last_address = f"{octets[0]}.{octets[1]}.255.255"
    elif first_octet >= 192 and first_octet <= 223:
        ip_class = 'Class C'
        block_number = (third_octet << 8) + int(octets[3])
        first_address = f"{octets[0]}.{octets[1]}.{octets[2]}.0"
        last_address = f"{octets[0]}.{octets[1]}.{octets[2]}.255"
    elif first_octet >= 224 and first_octet <= 239:
        ip_class = 'Class D'
        block_number = 'Multicast'
        first_address = '224.0.0.0'
        last_address = '239.255.255.255'
    elif first_octet >= 240 and first_octet <= 255:
        ip_class = 'Class E'
        block_number = 'Reserved Address Space'
        first_address = '240.0.0.0'
        last_address = '255.255.255.255'
    else:
        ip_class = 'Invalid'
        block_number = 'N/A'
        first_address = 'N/A'
        last_address = 'N/A'

    ip_type = 'Public'
    if is_private_ip(ip_address):
        ip_type = 'Private'
    elif is_reserved_ip(ip_address):
        ip_type = 'Reserved'

    return ip_class, block_number, first_address, last_address, ip_type

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        ip_address = request.form['ip_address']
        ip_class, block_number, first_address, last_address, ip_type = get_ip_class(ip_address)
        return render_template('index.html', ip_address=ip_address, ip_class=ip_class, block_number=block_number,
                               first_address=first_address, last_address=last_address, ip_type=ip_type)
    return render_template('index.html')

if __name__ == "__main__":
    app.run(debug=True)
